When I make the C++ version, I want:

1) replace the ABC with an interface. inheritance makes less sense than an interface
2) benchmark serial (O(m^2)) vs parallel (O(m) + overhead) programming of push/pop-right
3) for push/pop-left, benchmark these two strategies:
    a) the current O(m^2) strategy, where a given row is incremented/decremented by all others
    b) a new O(m) strategy, where we keep track of the sum of all the rows in self._matrix.
        Let this row be S, and let the given row be self._matrix[i].
        pushright algorithm:
            1) self._matrix[i], S = S, 2 * S - self._matrix[i]
        popright algorithm:
            1) S, self._matrix[i] = self._matrix[i], 2 * self._matrix[i] - S
        These are the same operations, but with S and self._matrix[i] swapped.
        
        NOTE: 2 * S and 2 * self._matrix[i] refer to doubling their entries