After some further research, I've come to realize that the bottleneck of
my prototype might actually be the hashing required in every method call.
My next step is to confirm this suspicion somehow, and I'll have to look
up ways to measure this. But I might want to transfer over to C++ at this
point, as long as I'm at the benchmarking stage. I also came up with a
plan of attack to speed up the hashing process. It's item #5 below.


When I make the C++ version, I want:

1) replace the ABC with an interface. inheritance makes less sense than an interface
2) benchmark serial (O(m^2)) vs parallel (O(m) + overhead) programming of push/pop-right
3) for push/pop-left, benchmark these two strategies:
    a) the current O(m^2) strategy, where a given row is incremented/decremented by all others
    b) a new O(m) strategy, where we keep track of the sum of all the rows in self._matrix.
        Let this row be S, and let the given row be self._matrix[i].
        pushright algorithm:
            1) self._matrix[i], S = S, 2 * S - self._matrix[i]
        popright algorithm:
            1) S, self._matrix[i] = self._matrix[i], 2 * self._matrix[i] - S
        These are the same operations, but with S and self._matrix[i] swapped.
        
        NOTE: 2 * S and 2 * self._matrix[i] refer to doubling their entries
4) Allow merging of holodeques with identical inputs that are mapped
   to axes in the matrix differently. I avoided this for this prototype
   because it requires constantly hashing the input to get their
   corresponding axes in the other holodeque, and I'm fairly confident
   that the hashing of each input is the bottleneck at this point.
5) design a smarter hash function that gets axis numbers faster
    a) There's no need to go through a whole hash routine when the input
       size is so small. Hashmaps were designed to accommodate a large
       amount of input, so they're overkill for this. If we have 10
       different items that the holodeque accepts, then there must exist
       4 bits that sufficiently distinguish between all of them. The
       general pattern is for m unique inputs that the holodeque accepts,
       we only need to check log(m) bits of any of them to identify them.
       So the lookup does not need to check all the bits of each element.
       This keeps all push/pop/peek operations in O(m) time.
    b) I just have to write a function that does thatâ€¦
    	    1) given a set of unique input at the initialization
	       of the holodeque, find the log(m) bits that sufficiently
	       identify them.
	    2) Replace what is currently a hashmap with a function that
	       checks only those bits to get the axis index.
	    3) Maybe write another version of this for when we know the
	       inputs at compile time, that way the compiler can optimze
	       it. Like, a way to indicate to the compiler for any given
	       problem that we know what the input will be.
